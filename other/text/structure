**** RULES OF CONSISTENCY ****

    1.  Every module should define 4 globals with the following default values:

            CHECK_ERROR      = True
            CHECK_WARNING    = True
            CRASH_ON_ERROR   = True
            CRASH_ON_WARNING = False

    2.  All uniforms will be a numpy.ndarray. The following convention should be followed:

            A  single scalar    'x'         should have shape '1'
            A  single vector    'vecn'      should have shape 'n'         where n = {2, 3, 4}
            A  single matrix    'matnxm'    should have shape 'n, m'      where n, m = {2, 3, 4}
            An array of scalars 'x[i]'      should have shape 'i, 1'
            An array of vector  'vecn[i]'   should have shape 'i, n'      where n = {2, 3, 4}
            An array of matrix  'matnxm[i]' should have shape 'i, n, m'   where n, m = {2, 3, 4}


There are 5 data types that can be uploaded to the shader in 5 different structures:

    Data types are float, double, int, uint and bool.
    Data structures are scalar, vector, matrix, array, struct, and others which are uploaded just with scalars.

    * Scalars can be all 5 data types.
    * Vectors can be all 5 data types and size 2, 3, 4.
    * Matrices can only be float (in GLSL 2.1) and have rows/cols of size 2, 3, 4.

    * Arrays can contain all data types and data structures of any size, but only one per array.
    * Structs can contain all data types and data structures of any size, there's no limit per struct.

    Scalars, vectors, array of scalars or array of vectors can be uploaded with glUniform{1, 2, 3, 4}{f, d, i, ui, b}v.

    Matrices needs to be uploaded using glUniformMatrix{n, nxm}. Arrays of matrices can be iterated over.

    Every field in a struct must be uploaded separately. That means we have to identify the fields and send them to the
    right function. Arrays of structs should be able to be iterated over.




Assets - Assets should be loaded to a global array, unless they are being streamed (such as music). Entities should have
         unsigned integers which represent the index of the asset in one of the arrays.

    * Models
    * Textures
    * Sounds


Component data storage

    By arranging every attribute in their own C-contiguous array it'll improve cache coherency.
    The memory for the component system is:

        memory size = attributes * bit size * entities

        Some examples:
            memory size = 32  * 32 * 100,000 = 102,400,000 bits = 12,800,000  bytes = 12.8  Mb
            memory size = 64  * 32 * 100,000 = 204,800,000 bits = 25,600,000  bytes = 25.6  Mb
            memory size = 128 * 32 * 100,000 = 409,600,000 bits = 51,200,000  bytes = 51.2  Mb
            memory size = 256 * 32 * 100,000 = 819,200,000 bits = 102,400,000 bytes = 102.4 Mb

        Memory references:
            256 x 256 png single color = 103 - 1,189 bytes = 0.1 - 1.2 kb
            256 x 256 png colored noise = 144,318 bytes = 144.3 kb




Entities:

    Attributes    |  Data type  |  Dependencies   |  Mask
                                                  |
    location      |  vec3       |                 |  DISPLACEMENT
    rotation      |  vec3       |  model          |  MODEL
    scale         |  vec3       |  model          |  MODEL
    model         |  uint       |  l, r, s        |  model
    color         |  vec3       |  model          |  model
    textures      |  uint       |  model

